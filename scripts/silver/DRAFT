DROP DATABASE IF EXISTS `DataWarehouse`;
CREATE DATABASE DataWarehouse;
USE DataWarehouse;

CREATE SCHEMA bronze_schema;
CREATE SCHEMA silver_schema;
CREATE SCHEMA gold_schema;

USE silver_schema;

DROP TABLE IF EXISTS silver_schema.crm_cust_info;
CREATE TABLE silver_schema.crm_cust_info(
    cst_id INT,
    cst_key VARCHAR(50),
    cst_firstname VARCHAR(50),
    cst_lastname VARCHAR(50),
    cst_marital_status VARCHAR(50),
    cst_gndr VARCHAR(50),
    cst_create_date DATE,
    dwh_create_date DATETIME DEFAULT CURRENT_TIMESTAMP
 
);
select * from silver_schema.crm_cust_info;

DROP TABLE IF EXISTS silver_schema.crm_prd_info;
CREATE TABLE silver_schema.crm_prd_info(
    prd_id INT,
    cat_id VARCHAR(50),
    prd_key VARCHAR(50),
    prd_nm VARCHAR(50),
    prd_cost INT,
    prd_line VARCHAR(50),
    prd_start_dt DATE,
    prd_end_dt DATE,
    dwh_create_date DATETIME DEFAULT CURRENT_TIMESTAMP
);
select * from silver_schema.crm_prd_info;

DROP TABLE IF EXISTS silver_schema.crm_sales_details;
CREATE TABLE silver_schema.crm_sales_details(
    sls_ord_num VARCHAR(50),
    sls_prd_key VARCHAR(50),
    sls_cust_id INT,
    sls_order_dt DATE,
    sls_ship_dt DATE,
    sls_due_dt DATE,
    sls_sales INT,
    sls_quantity INT,
    sls_price INT,
    dwh_create_date DATETIME DEFAULT CURRENT_TIMESTAMP
);
select * from silver_schema.crm_sales_details;

DROP TABLE IF EXISTS silver_schema.erp_loc_a101;
CREATE TABLE silver_schema.erp_loc_a101(
    cid VARCHAR(50),
    cntry VARCHAR(50),
    dwh_create_date DATETIME DEFAULT CURRENT_TIMESTAMP
);
select * from  silver_schema.erp_loc_a101;


DROP TABLE IF EXISTS silver_schema.erp_cust_az12;
CREATE TABLE silver_schema.erp_cust_az12(
    cid VARCHAR(50),
    bdate DATE,
    gen VARCHAR(50),
    dwh_create_date DATETIME DEFAULT CURRENT_TIMESTAMP
);
select * from  silver_schema.erp_cust_az12;

DROP TABLE IF EXISTS silver_schema.erp_px_cat_glv2;
CREATE TABLE silver_schema.erp_px_cat_glv2(
    id VARCHAR(50),
    cat VARCHAR(50),
    subcat VARCHAR(50),
    maintenance VARCHAR(50),
    dwh_create_date DATETIME DEFAULT CURRENT_TIMESTAMP
);
select * from  silver_schema.erp_px_cat_glv2;

SELECT * FROM silver_schema.crm_cust_info LIMIT 100;




/* Check the Primary Key doesn't contain NULL or Duplicates */

SELECT cst_id, COUNT(*)
FROM bronze_schema.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

SELECT *
FROM bronze_schema.crm_cust_info
WHERE cst_id = 29466;

SELECT *,
ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM bronze_schema.crm_cust_info
WHERE cst_id = 29466;


SELECT *
FROM(
SELECT *,
ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM bronze_schema.crm_cust_info) t
WHERE flag_last = 1;




/*Check for unwanted space*/

SELECT cst_firstname 
FROM bronze_schema.crm_cust_info
WHERE cst_firstname != TRIM(cst_firstname);

SELECT cst_lastname 
FROM bronze_schema.crm_cust_info
WHERE cst_lastname != TRIM(cst_lastname);


SELECT  
    cst_id,
    cst_key,
    TRIM(cst_firstname) AS cst_firstname,
    TRIM(cst_lastname) AS cst_lastname,
    cst_marital_status,
    cst_gndr,
    cst_create_date,
    dwh_create_date
FROM bronze_schema.crm_cust_info;

/* Data Standardization & Consistency */

SELECT DISTINCT cst_gndr
FROM  bronze_schema.crm_cust_info;

SELECT  
    cst_id,
    cst_key,
    TRIM(cst_firstname) AS cst_firstname,
    TRIM(cst_lastname) AS cst_lastname,
    cst_marital_status,
    
    CASE WHEN UPPER(TRIM(cst_gndr)) ='F' THEN 'Female'
    WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
    ELSE 'N/A'
    END
    cst_create_date,
    dwh_create_date
FROM bronze_schema.crm_cust_info;


SELECT DISTINCT cst_marital_status
FROM  bronze_schema.crm_cust_info;



SELECT  
    cst_id,
    cst_key,
    TRIM(cst_firstname) AS cst_firstname,
    TRIM(cst_lastname) AS cst_lastname,
    CASE WHEN UPPER(TRIM(cst_marital_status)) ='M' THEN 'Married'
        WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
        ELSE 'N/A'
    END cst_marital_status,
    CASE WHEN UPPER(TRIM(cst_gndr)) ='F' THEN 'Female'
        WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
        ELSE 'N/A'
    END cst_gndr,
    cst_create_date
FROM(
    SELECT *,
    ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
    FROM bronze_schema.crm_cust_info
    WHERE cst_id IS NOT NULL
)t
 WHERE flag_last = 1;

/*Insert the table*/

INSERT INTO silver_schema.crm_cust_info( 
    cst_id,
    cst_key,
    cst_firstname,
    cst_lastname,
    cst_marital_status,
    cst_gndr,
    cst_create_date
    )
SELECT  
    cst_id,
    cst_key,
    TRIM(cst_firstname) AS cst_firstname,
    TRIM(cst_lastname) AS cst_lastname,
    CASE WHEN UPPER(TRIM(cst_marital_status)) ='M' THEN 'Married'
        WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
        ELSE 'N/A'
    END cst_marital_status,
    CASE WHEN UPPER(TRIM(cst_gndr)) ='F' THEN 'Female'
        WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
        ELSE 'N/A'
    END cst_gndr,
    cst_create_date
FROM(
    SELECT *,
    ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
    FROM bronze_schema.crm_cust_info
    WHERE cst_id IS NOT NULL
)t
 WHERE flag_last = 1;


/* Check the Primary Key doesn't contain NULL or Duplicates */

SELECT cst_id, COUNT(*)
FROM silver_schema.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

/*Check for unwanted space*/

SELECT cst_firstname 
FROM silver_schema.crm_cust_info
WHERE cst_firstname != TRIM(cst_firstname);

SELECT cst_lastname 
FROM silver_schema.crm_cust_info
WHERE cst_lastname != TRIM(cst_lastname);

/* Data Standardization & Consistency */

SELECT DISTINCT cst_gndr
FROM  silver_schema.crm_cust_info;

select * from silver_schema.crm_cust_info;


/*_______________________________________________*/



SELECT 
    prd_id,
    prd_key,
     REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
    prd_nm,
    prd_cost,
    prd_line,
    prd_start_dt,
    prd_end_dt
FROM bronze_schema.crm_prd_info
WHERE REPLACE(SUBSTRING(prd_key,1,5),'-','_') NOT IN(
SELECT DISTINCT id
FROM bronze_schema.erp_px_cat_glv2 
);

SELECT DISTINCT id
FROM bronze_schema.erp_px_cat_glv2;


/*SELECT 
    prd_id,
    prd_key,
     REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
     SUBSTRING(prd_key,7,LEN(prd_key)) AS prd_key,
    prd_nm,
    prd_cost,
    prd_line,
    prd_start_dt,
    prd_end_dt
FROM bronze_schema.crm_prd_info; */


SELECT 
    prd_id,
    prd_key,
     REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
     SUBSTRING(prd_key,7,CHAR_LENGTH(prd_key)) AS prd_key,
    prd_nm,
    prd_cost,
    prd_line,
    prd_start_dt,
    prd_end_dt
FROM bronze_schema.crm_prd_info;


SELECT sls_prd_key FROM bronze_schema.crm_sales_details;

SELECT 
    prd_id,
    prd_key,
     REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
     SUBSTRING(prd_key,7,CHAR_LENGTH(prd_key)) AS prd_key,
    prd_nm,
    prd_cost,
    prd_line,
    prd_start_dt,
    prd_end_dt
FROM bronze_schema.crm_prd_info
WHERE SUBSTRING(prd_key,7,CHAR_LENGTH(prd_key)) NOT IN (SELECT sls_prd_key FROM bronze_schema.crm_sales_details);

SELECT 
    prd_id,
    prd_key,
     REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
     SUBSTRING(prd_key,7,CHAR_LENGTH(prd_key)) AS prd_key,
    prd_nm,
    ISNULL(prd_cost,0) AS prd_cost,
    prd_line,
    prd_start_dt,
    prd_end_dt
FROM bronze_schema.crm_prd_info;

SELECT 
    prd_id,
    prd_key,
     REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
     SUBSTRING(prd_key,7,CHAR_LENGTH(prd_key)) AS prd_key,
    prd_nm,
    IFNULL(prd_cost,0) AS prd_cost,
    prd_line,
    prd_start_dt,
    prd_end_dt
FROM bronze_schema.crm_prd_info;

/* UNWANTED SPACE*/

SELECT prd_nm 
FROM bronze_schema.crm_prd_info
WHERE prd_nm != TRIM(prd_nm);

/* CHECK FOR NULLS OR NEGATIVE NUMBERS*/
SELECT prd_cost 
FROM bronze_schema.crm_prd_info
WHERE prd_cost < 0 OR prd_cost IS NULL;

/*SELECT 
    prd_id,
    prd_key,
     REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
     SUBSTRING(prd_key,7,LEN(prd_key)) AS prd_key,
    prd_nm,
    prd_cost,
    ISNULL(prd_cost,0) AS prd_cost,
    prd_line,
    prd_start_dt,
    prd_end_dt
FROM bronze_schema.crm_prd_info; */



SELECT 
    prd_id,
    prd_key,
     REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
     SUBSTRING(prd_key,7,CHAR_LENGTH(prd_key)) AS prd_key,
    prd_nm,
    IFNULL(prd_cost,0) AS prd_cost,
    CASE 
        WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
        WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
        WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other Sales'
        WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
    ELSE 'N/A'
    END AS prd_line,
    prd_start_dt,
    prd_end_dt
FROM bronze_schema.crm_prd_info;


/* Data Standardization & Consistency */

SELECT DISTINCT prd_line
FROM  bronze_schema.crm_prd_info;


SELECT 
    prd_id,
    prd_key,
     REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
     SUBSTRING(prd_key,7,CHAR_LENGTH(prd_key)) AS prd_key,
    prd_nm,
    IFNULL(prd_cost,0) AS prd_cost,
    CASE  UPPER(TRIM(prd_line))
        WHEN 'M' THEN 'Mountain'
        WHEN 'R' THEN 'Road'
        WHEN 'S' THEN 'Other Sales'
        WHEN 'T' THEN 'Touring'
    ELSE 'N/A'
    END AS prd_line,
    prd_start_dt,
    prd_end_dt
FROM bronze_schema.crm_prd_info;


/* Check for invalid Date Orders */
SELECT * 
FROM bronze_schema.crm_prd_info
WHERE prd_end_dt < prd_start_dt;



/* 
SELECT 
    prd_id,
    prd_key,
    prd_nm,
    prd_start_dt,
    prd_end_dt,
    LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS prd_end_dt_test
FROM bronze_schema.crm_prd_info
WHERE prd_key IN('AC-HE-HL-U509-R','AC-HE-HL-U509') ; 
*/

SELECT 
    prd_id,
    prd_key,
    prd_nm,
    prd_start_dt,
    prd_end_dt,
    DATE_SUB(LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt), INTERVAL 1 DAY) AS prd_end_dt_test
FROM bronze_schema.crm_prd_info
WHERE prd_key IN('AC-HE-HL-U509-R','AC-HE-HL-U509') ; 




/*SELECT 
    prd_id,
    prd_key,
     REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
     SUBSTRING(prd_key,7,LEN(prd_key)) AS prd_key,
    prd_nm,
    prd_cost,
    ISNULL(prd_cost,0) AS prd_cost,
    prd_line,
    CAST(prd_start_dt AS DATE) AS prd_start_dt,
    CAST(DATE_SUB(LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt), INTERVAL 1 DAY) AS DATE) AS prd_end_dt
FROM bronze_schema.crm_prd_info
; */



SELECT 
    prd_id,
    prd_key,
     REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
     SUBSTRING(prd_key,7,CHAR_LENGTH(prd_key)) AS prd_key,
    prd_nm,
    IFNULL(prd_cost,0) AS prd_cost,
    CASE 
        WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
        WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
        WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other Sales'
        WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
    ELSE 'N/A'
    END AS prd_line,
    CAST(prd_start_dt AS DATE) AS prd_start_dt ,
    CAST(DATE_SUB(LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt), INTERVAL 1 DAY) AS DATE) AS prd_end_dt_test
FROM bronze_schema.crm_prd_info;



INSERT INTO silver_schema.crm_prd_info(
    prd_id,
    cat_id,
    prd_key,
    prd_nm,
    prd_cost,
    prd_line,
    prd_start_dt,
    prd_end_dt
)
SELECT 
    prd_id,
     REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
     SUBSTRING(prd_key,7,CHAR_LENGTH(prd_key)) AS prd_key,
    prd_nm,
    IFNULL(prd_cost,0) AS prd_cost,
    CASE 
        WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
        WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
        WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other Sales'
        WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
    ELSE 'N/A'
    END AS prd_line,
    CAST(prd_start_dt AS DATE) AS prd_start_dt,
    CAST(DATE_SUB(LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt), INTERVAL 1 DAY) AS DATE) AS prd_end_dt_test
FROM bronze_schema.crm_prd_info;

SELECT * FROM silver_schema.crm_prd_info;



/* Check the Primary Key doesn't contain NULL or Duplicates */

SELECT prd_id, COUNT(*)
FROM silver_schema.crm_prd_info
GROUP BY prd_id
HAVING COUNT(*) > 1 OR prd_id IS NULL;


/* Check for invalid Date Orders */
SELECT * 
FROM silver_schema.crm_prd_info
WHERE prd_end_dt < prd_start_dt;


/* Data Standardization & Consistency */

SELECT DISTINCT prd_line
FROM  silver_schema.crm_prd_info;

/* UNWANTED SPACE*/

SELECT prd_nm 
FROM silver_schema.crm_prd_info
WHERE prd_nm != TRIM(prd_nm);

/* CHECK FOR NULLS OR NEGATIVE NUMBERS*/
SELECT prd_cost 
FROM silver_schema.crm_prd_info
WHERE prd_cost < 0 OR prd_cost IS NULL;

SELECT * FROM silver_schema.crm_prd_info;

/*______________________________________________________*/

/* CREATE TABLE silver_schema.crm_sales_details(
    sls_ord_num VARCHAR(50),
    sls_prd_key VARCHAR(50),
    sls_cust_id INT,
    sls_order_dt INT,
    sls_ship_dt INT,
    sls_due_dt INT,
    sls_sales INT,
    sls_quantity INT,
    sls_price INT,
    dwh_create_date DATETIME DEFAULT CURRENT_TIMESTAMP; */


SELECT
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    sls_order_dt,
    sls_ship_dt,
    sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
FROM bronze_schema.crm_sales_details;

/* UNWANTED SPACE*/

SELECT sls_ord_num 
FROM  bronze_schema.crm_sales_details
WHERE sls_ord_num != TRIM(sls_ord_num);


/* check the Key with other table */

SELECT
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    sls_order_dt,
    sls_ship_dt,
    sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
FROM bronze_schema.crm_sales_details
WHERE sls_prd_key NOT IN(SELECT prd_key FROM silver_schema.crm_prd_info);

SELECT
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    NULLIF(sls_order_dt,0)
    sls_ship_dt,
    sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
FROM bronze_schema.crm_sales_details;

/* check DATE VALUE */
SELECT
     sls_order_dt
FROM bronze_schema.crm_sales_details
WHERE sls_order_dt < 0;

SELECT
     sls_order_dt
FROM bronze_schema.crm_sales_details
WHERE sls_order_dt = 0;

/* Check ALL POSSIBLE DATE VALUE */
SELECT
     NULLIF(sls_order_dt,0) AS sls_order_dt
FROM bronze_schema.crm_sales_details
WHERE sls_order_dt <= 0 
OR CHAR_LENGTH(sls_order_dt)!=8 
OR sls_order_dt > 205000101 
OR sls_order_dt < 19000101;

SELECT
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    CASE WHEN sls_order_dt <= 0 
        OR CHAR_LENGTH(sls_order_dt)!=8 
        OR sls_order_dt > 205000101 
        OR sls_order_dt < 19000101
        THEN NULL
        ELSE CAST(CAST(sls_order_dt AS CHAR) AS DATE)
    END AS sls_order_dt,
    sls_ship_dt,
    sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
FROM bronze_schema.crm_sales_details;

/* Check ALL POSSIBLE DATE VALUE */
SELECT
     NULLIF(sls_ship_dt,0) AS sls_ship_dt
FROM bronze_schema.crm_sales_details
WHERE sls_ship_dt <= 0 
OR CHAR_LENGTH(sls_ship_dt)!=8 
OR sls_ship_dt > 205000101 
OR sls_ship_dt < 19000101;


SELECT
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    CASE WHEN sls_order_dt <= 0 
        OR CHAR_LENGTH(sls_order_dt)!=8 
        OR sls_order_dt > 205000101 
        OR sls_order_dt < 19000101
        THEN NULL
        ELSE CAST(CAST(sls_order_dt AS CHAR) AS DATE)
    END AS sls_order_dt,
    CASE WHEN sls_ship_dt <= 0 
        OR CHAR_LENGTH(sls_ship_dt)!=8 
        OR sls_ship_dt > 205000101 
        OR sls_ship_dt < 19000101
        THEN NULL
        ELSE CAST(CAST(sls_ship_dt AS CHAR) AS DATE)
    END AS sls_due_dt,
     CASE WHEN sls_due_dt <= 0 
        OR CHAR_LENGTH(sls_due_dt)!=8 
        OR sls_due_dt > 205000101 
        OR sls_due_dt < 19000101
        THEN NULL
        ELSE CAST(CAST(sls_due_dt AS CHAR) AS DATE)
    END AS sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
FROM bronze_schema.crm_sales_details;

/* order date should be the smallest*/
/* Check for invalid order date*/

SELECT * 
FROM bronze_schema.crm_sales_details
WHERE sls_order_dt > sls_ship_dt
OR sls_order_dt > sls_due_dt;



/* Check for SALES VALUES 
SALES = QUANTITY* PRICE
SALES VALUES MUST NOT BE 0, NEGATIVE OR NULL */

SELECT 
    sls_sales,
    sls_quantity,
    sls_price
FROM bronze_schema.crm_sales_details
WHERE sls_sales != sls_quantity * sls_price
OR sls_sales <= 0
OR sls_quantity <= 0
OR sls_price <= 0
OR sls_sales IS NULL
OR sls_quantity IS NULL
OR sls_price IS NULL
ORDER BY  sls_sales,sls_quantity, sls_price;



SELECT 
    sls_sales AS old_sls_sales,
    sls_quantity,
    sls_price AS old_sls_price,
    CASE WHEN sls_sales IS NULL OR sls_sales != sls_quantity* ABS(sls_price)
            THEN  sls_quantity* ABS(sls_price)
            ELSE sls_sales
        END AS sls_sales,
    CASE WHEN sls_price IS NULL OR sls_price <= 0
            THEN  sls_sales/ NULLIF(sls_quantity,0)
            ELSE sls_price
    END AS sls_price
FROM bronze_schema.crm_sales_details
WHERE sls_sales != sls_quantity * sls_price
OR sls_sales <= 0
OR sls_quantity <= 0
OR sls_price <= 0
OR sls_sales IS NULL
OR sls_quantity IS NULL
OR sls_price IS NULL
ORDER BY  sls_sales,sls_quantity, sls_price;

SELECT 
    sls_sales AS old_sls_sales,
    sls_quantity,
    sls_price AS old_sls_price,
    CASE WHEN sls_sales IS NULL OR sls_sales != sls_quantity* ABS(sls_price)
            THEN  sls_quantity* ABS(sls_price)
            ELSE sls_sales
        END AS sls_sales,
    CASE WHEN sls_price IS NULL OR sls_price <= 0
            THEN  sls_sales/ NULLIF(sls_quantity,0)
            ELSE sls_price
    END AS sls_price
FROM bronze_schema.crm_sales_details
WHERE sls_sales != sls_quantity * sls_price
OR sls_sales <= 0
OR sls_quantity <= 0
OR sls_price <= 0
OR sls_sales IS NULL
OR sls_quantity IS NULL
OR sls_price IS NULL
ORDER BY  sls_sales,sls_quantity, sls_price;


/* PUT IT BACK TO THE QUERY */

SELECT
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    CASE WHEN sls_order_dt <= 0 
        OR CHAR_LENGTH(sls_order_dt)!=8 
        OR sls_order_dt > 205000101 
        OR sls_order_dt < 19000101
        THEN NULL
        ELSE CAST(CAST(sls_order_dt AS CHAR) AS DATE)
    END AS sls_order_dt,
    CASE WHEN sls_ship_dt <= 0 
        OR CHAR_LENGTH(sls_ship_dt)!=8 
        OR sls_ship_dt > 205000101 
        OR sls_ship_dt < 19000101
        THEN NULL
        ELSE CAST(CAST(sls_ship_dt AS CHAR) AS DATE)
    END AS sls_due_dt,
     CASE WHEN sls_due_dt <= 0 
        OR CHAR_LENGTH(sls_due_dt)!=8 
        OR sls_due_dt > 205000101 
        OR sls_due_dt < 19000101
        THEN NULL
        ELSE CAST(CAST(sls_due_dt AS CHAR) AS DATE)
    END AS sls_due_dt,
     CASE WHEN sls_sales IS NULL OR sls_sales != sls_quantity* ABS(sls_price)
            THEN  sls_quantity* ABS(sls_price)
            ELSE sls_sales
        END AS sls_sales,
    sls_quantity,
     CASE WHEN sls_price IS NULL OR sls_price <= 0
            THEN  sls_sales/ NULLIF(sls_quantity,0)
            ELSE sls_price
    END AS sls_price
FROM bronze_schema.crm_sales_details;


/* INSERT TABLE */
INSERT INTO silver_schema.crm_sales_details(
      sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    sls_order_dt,
    sls_ship_dt,
    sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
)

SELECT
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    CASE WHEN sls_order_dt <= 0 
        OR CHAR_LENGTH(sls_order_dt)!=8 
        OR sls_order_dt > 205000101 
        OR sls_order_dt < 19000101
        THEN NULL
        ELSE CAST(CAST(sls_order_dt AS CHAR) AS DATE)
    END AS sls_order_dt,
    CASE WHEN sls_ship_dt <= 0 
        OR CHAR_LENGTH(sls_ship_dt)!=8 
        OR sls_ship_dt > 205000101 
        OR sls_ship_dt < 19000101
        THEN NULL
        ELSE CAST(CAST(sls_ship_dt AS CHAR) AS DATE)
    END AS sls_due_dt,
     CASE WHEN sls_due_dt <= 0 
        OR CHAR_LENGTH(sls_due_dt)!=8 
        OR sls_due_dt > 205000101 
        OR sls_due_dt < 19000101
        THEN NULL
        ELSE CAST(CAST(sls_due_dt AS CHAR) AS DATE)
    END AS sls_due_dt,
     CASE WHEN sls_sales IS NULL OR sls_sales != sls_quantity* ABS(sls_price)
            THEN  sls_quantity* ABS(sls_price)
            ELSE sls_sales
        END AS sls_sales,
    sls_quantity,
     CASE WHEN sls_price IS NULL OR sls_price <= 0
            THEN  sls_sales/ NULLIF(sls_quantity,0)
            ELSE sls_price
    END AS sls_price
FROM bronze_schema.crm_sales_details;


/* UNWANTED SPACE*/

SELECT sls_ord_num 
FROM  silver_schema.crm_sales_details
WHERE sls_ord_num != TRIM(sls_ord_num);

/* check DATE VALUE */
SELECT
     sls_order_dt
FROM silver_schema.crm_sales_details
WHERE sls_order_dt < 0;

SELECT
     sls_order_dt
FROM silver_schema.crm_sales_details
WHERE sls_order_dt = 0;


/* order date should be the smallest*/
/* Check for invalid order date*/

SELECT * 
FROM silver_schema.crm_sales_details
WHERE sls_order_dt > sls_ship_dt
OR sls_order_dt > sls_due_dt;


/* Check for SALES VALUES 
SALES = QUANTITY* PRICE
SALES VALUES MUST NOT BE 0, NEGATIVE OR NULL */

SELECT 
    sls_sales,
    sls_quantity,
    sls_price
FROM silver_schema.crm_sales_details
WHERE sls_sales != sls_quantity * sls_price
OR sls_sales <= 0
OR sls_quantity <= 0
OR sls_price <= 0
OR sls_sales IS NULL
OR sls_quantity IS NULL
OR sls_price IS NULL
ORDER BY  sls_sales,sls_quantity, sls_price;

/* ________________________________________________*/


SELECT 
    cid,
    bdate,
    gen 
FROM bronze_schema.erp_cust_az12;

/* Check names with other table */

SELECT * FROM silver_schema.crm_cust_info;



/* transformed data */

SELECT 
    CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid,4,CHAR_LENGTH(cid))
         ELSE cid
        END AS cid,
    bdate,
    gen 
FROM bronze_schema.erp_cust_az12;

/* Check if the transformed data is in the other table */
SELECT 
    CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid,4,CHAR_LENGTH(cid))
         ELSE cid
        END AS cid,
    bdate,
    gen 
FROM bronze_schema.erp_cust_az12
WHERE CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid,4,CHAR_LENGTH(cid))
            ELSE cid
       END 
        NOT IN (SELECT DISTINCT cst_key FROM silver_schema.crm_cust_info);



/* Check birthday that is out of range */
SELECT DISTINCT
    bdate
FROM bronze_schema.erp_cust_az12
WHERE bdate <'1924-01-01'OR bdate > CURRENT_TIMESTAMP;



SELECT 
CASE 
    WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid,4,CHAR_LENGTH(cid))
    ELSE cid
END AS cid,
CASE 
    WHEN 
    bdate > CURRENT_TIMESTAMP THEN NULL
    ELSE bdate
END AS bdate,
gen 
FROM bronze_schema.erp_cust_az12;

/* Check gen for consistency*/

SELECT DISTINCT gen
FROM bronze_schema.erp_cust_az12;


SELECT 
CASE 
    WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid,4,CHAR_LENGTH(cid))
    ELSE cid
END AS cid,
CASE 
    WHEN 
    bdate > CURRENT_TIMESTAMP THEN NULL
    ELSE bdate
END AS bdate,
CASE 
    WHEN UPPER(TRIM(gen)) IN ('M','Male') THEN 'Male'
    WHEN UPPER(TRIM(gen)) IN ('F','Female') THEN 'Female'
    ELSE 'N/A'
END AS gen
FROM bronze_schema.erp_cust_az12;

/* insert into table*/

INSERT INTO silver_schema.erp_cust_az12(cid, bdate,gen)

SELECT 
CASE 
    WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid,4,CHAR_LENGTH(cid))
    ELSE cid
END AS cid,
CASE 
    WHEN 
    bdate > CURRENT_TIMESTAMP THEN NULL
    ELSE bdate
END AS bdate,
CASE 
    WHEN UPPER(TRIM(gen)) IN ('M','Male') THEN 'Male'
    WHEN UPPER(TRIM(gen)) IN ('F','Female') THEN 'Female'
    ELSE 'N/A'
END AS gen
FROM bronze_schema.erp_cust_az12;


/* Check gen for consistency*/

SELECT DISTINCT gen
FROM bronze_schema.erp_cust_az12;


SELECT 
CASE 
    WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid,4,CHAR_LENGTH(cid))
    ELSE cid
END AS cid,
CASE 
    WHEN 
    bdate > CURRENT_TIMESTAMP THEN NULL
    ELSE bdate
END AS bdate,
CASE 
    WHEN UPPER(TRIM(gen)) IN ('M','Male') THEN 'Male'
    WHEN UPPER(TRIM(gen)) IN ('F','Female') THEN 'Female'
    ELSE 'N/A'
END AS gen
FROM silver_schema.erp_cust_az12;

/* Check gen for consistency*/
SELECT DISTINCT gen
FROM silver_schema.erp_cust_az12;

/* Check birthday that is out of range */
SELECT DISTINCT
    bdate
FROM silver_schema.erp_cust_az12
WHERE  bdate > CURRENT_TIMESTAMP;


/*-------------------------------------*/
CREATE TABLE silver_schema.erp_loc_a101(
    cid VARCHAR(50),
    cntry VARCHAR(50),
    dwh_create_date DATETIME DEFAULT CURRENT_TIMESTAMP
);
select * from  silver_schema.erp_loc_a101;

/* Check id with other table*/

SELECT 
    cid
FROM bronze_schema.erp_loc_a101;

SELECT cst_key FROM silver_schema.crm_cust_info;

SELECT 
    REPLACE(cid,'-',''),
    cntry
 FROM  bronze_schema.erp_loc_a101;


/* Check cntry for consistency*/
SELECT 
    DISTINCT cntry
FROM bronze_schema.erp_loc_a101;

SELECT 
    REPLACE(cid,'-',''),
    CASE 
    WHEN TRIM(cntry) IN ('US','USA','United States') THEN 'United States'
    WHEN TRIM(cntry) = 'DE' THEN 'Germany'
    WHEN TRIM(cntry) IS NULL OR TRIM(cntry) ='' THEN 'N/A'
    ELSE TRIM(cntry) 
    END AS cntry
 FROM  bronze_schema.erp_loc_a101;

SELECT
DISTINCT
 CASE 
    WHEN TRIM(cntry) IN ('US','USA','United States') THEN 'United States'
    WHEN TRIM(cntry) = 'DE' THEN 'Germany'
    WHEN TRIM(cntry) IS NULL OR TRIM(cntry) ='' THEN 'N/A'
    ELSE TRIM(cntry) 
    END AS cntry
 FROM  bronze_schema.erp_loc_a101;


 INSERT INTO silver_schema.erp_loc_a101(cid,cntry)
 SELECT 
    REPLACE(cid,'-',''),
    CASE 
    WHEN TRIM(cntry) IN ('US','USA','United States') THEN 'United States'
    WHEN TRIM(cntry) = 'DE' THEN 'Germany'
    WHEN TRIM(cntry) IS NULL OR TRIM(cntry) ='' THEN 'N/A'
    ELSE TRIM(cntry) 
    END AS cntry
 FROM  bronze_schema.erp_loc_a101;



/* Check id with other table*/

SELECT 
    cid
FROM silver_schema.erp_loc_a101;

SELECT cst_key FROM silver_schema.crm_cust_info;

/* Check cntry for consistency*/
SELECT 
    DISTINCT cntry
FROM silver_schema.erp_loc_a101;

SELECT * FROM silver_schema.erp_loc_a101;



/*---------------------------*/
SELECT 
    id,
    cat,
    subcat,
    maintenance 
FROM  bronze_schema.erp_px_cat_glv2;


/* Check id*/

SELECT 
    id
FROM  bronze_schema.erp_px_cat_glv2;

select * from silver_schema.crm_prd_info;


/* UNWANTED SPACE*/

SELECT * 
FROM   bronze_schema.erp_px_cat_glv2
WHERE cat != TRIM(cat)
OR subcat != TRIM(subcat)
OR maintenance != TRIM(maintenance);


/* Check cat, subcat, maintenance for consistency*/
SELECT 
    DISTINCT cat
FROM bronze_schema.erp_px_cat_glv2;

SELECT 
    DISTINCT subcat
FROM bronze_schema.erp_px_cat_glv2;

SELECT 
    DISTINCT maintenance
FROM bronze_schema.erp_px_cat_glv2;


INSERT INTO silver_schema.erp_px_cat_glv2(id,cat,subcat,maintenance)
SELECT 
    id,
    cat,
    subcat,
    maintenance 
FROM  bronze_schema.erp_px_cat_glv2;

SELECT * FROM silver_schema.erp_px_cat_glv2;






INSERT INTO silver_schema.crm_sales_details(
      sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    sls_order_dt,
    sls_ship_dt,
    sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
)

SELECT
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    CASE WHEN sls_order_dt <= 0 
        OR CHAR_LENGTH(sls_order_dt)!=8 
        OR sls_order_dt > 205000101 
        OR sls_order_dt < 19000101
        THEN NULL
        ELSE CAST(CAST(sls_order_dt AS CHAR) AS DATE)
    END AS sls_order_dt,
    CASE WHEN sls_ship_dt <= 0 
        OR CHAR_LENGTH(sls_ship_dt)!=8 
        OR sls_ship_dt > 205000101 
        OR sls_ship_dt < 19000101
        THEN NULL
        ELSE CAST(CAST(sls_ship_dt AS CHAR) AS DATE)
    END AS sls_due_dt,
     CASE WHEN sls_due_dt <= 0 
        OR CHAR_LENGTH(sls_due_dt)!=8 
        OR sls_due_dt > 205000101 
        OR sls_due_dt < 19000101
        THEN NULL
        ELSE CAST(CAST(sls_due_dt AS CHAR) AS DATE)
    END AS sls_due_dt,
     CASE WHEN sls_sales IS NULL OR sls_sales != sls_quantity* ABS(sls_price)
            THEN  sls_quantity* ABS(sls_price)
            ELSE sls_sales
        END AS sls_sales,
    sls_quantity,
     CASE WHEN sls_price IS NULL OR sls_price <= 0
            THEN  sls_sales/ NULLIF(sls_quantity,0)
            ELSE sls_price
    END AS sls_price
FROM bronze_schema.crm_sales_details;




/*##################################################*/
CREATE PROCEDURE silver_load_silver()
BEGIN 
-- Truncating Table
TRUNCATE TABLE silver_schema.crm_cust_info;

INSERT INTO silver_schema.crm_cust_info( 
    cst_id,
    cst_key,
    cst_firstname,
    cst_lastname,
    cst_marital_status,
    cst_gndr,
    cst_create_date
    )
SELECT  
    cst_id,
    cst_key,
    TRIM(cst_firstname) AS cst_firstname,
    TRIM(cst_lastname) AS cst_lastname,
    CASE WHEN UPPER(TRIM(cst_marital_status)) ='M' THEN 'Married'
        WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
        ELSE 'N/A'
    END cst_marital_status,
    CASE WHEN UPPER(TRIM(cst_gndr)) ='F' THEN 'Female'
        WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
        ELSE 'N/A'
    END cst_gndr,
    cst_create_date
FROM(
    SELECT *,
    ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
    FROM bronze_schema.crm_cust_info
    WHERE cst_id IS NOT NULL
)t
 WHERE flag_last = 1;


-- Truncating Table
TRUNCATE TABLE silver_schema.crm_prd_info;

 INSERT INTO silver_schema.crm_prd_info(
    prd_id,
    cat_id,
    prd_key,
    prd_nm,
    prd_cost,
    prd_line,
    prd_start_dt,
    prd_end_dt
)
SELECT 
    prd_id,
     REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
     SUBSTRING(prd_key,7,CHAR_LENGTH(prd_key)) AS prd_key,
    prd_nm,
    IFNULL(prd_cost,0) AS prd_cost,
    CASE 
        WHEN UPPER(TRIM(prd_line)) = 'M' THEN 'Mountain'
        WHEN UPPER(TRIM(prd_line)) = 'R' THEN 'Road'
        WHEN UPPER(TRIM(prd_line)) = 'S' THEN 'Other Sales'
        WHEN UPPER(TRIM(prd_line)) = 'T' THEN 'Touring'
    ELSE 'N/A'
    END AS prd_line,
    CAST(prd_start_dt AS DATE) AS prd_start_dt,
    CAST(DATE_SUB(LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt), INTERVAL 1 DAY) AS DATE) AS prd_end_dt_test
FROM bronze_schema.crm_prd_info;

-- Truncating Table
TRUNCATE TABLE silver_schema.crm_sales_details;

INSERT INTO silver_schema.crm_sales_details(
      sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    sls_order_dt,
    sls_ship_dt,
    sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
)
SELECT
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    CASE WHEN sls_order_dt <= 0 
        OR CHAR_LENGTH(sls_order_dt)!=8 
        OR sls_order_dt > 205000101 
        OR sls_order_dt < 19000101
        THEN NULL
        ELSE CAST(CAST(sls_order_dt AS CHAR) AS DATE)
    END AS sls_order_dt,
    CASE WHEN sls_ship_dt <= 0 
        OR CHAR_LENGTH(sls_ship_dt)!=8 
        OR sls_ship_dt > 205000101 
        OR sls_ship_dt < 19000101
        THEN NULL
        ELSE CAST(CAST(sls_ship_dt AS CHAR) AS DATE)
    END AS sls_due_dt,
     CASE WHEN sls_due_dt <= 0 
        OR CHAR_LENGTH(sls_due_dt)!=8 
        OR sls_due_dt > 205000101 
        OR sls_due_dt < 19000101
        THEN NULL
        ELSE CAST(CAST(sls_due_dt AS CHAR) AS DATE)
    END AS sls_due_dt,
     CASE WHEN sls_sales IS NULL OR sls_sales != sls_quantity* ABS(sls_price)
            THEN  sls_quantity* ABS(sls_price)
            ELSE sls_sales
        END AS sls_sales,
    sls_quantity,
     CASE WHEN sls_price IS NULL OR sls_price <= 0
            THEN  sls_sales/ NULLIF(sls_quantity,0)
            ELSE sls_price
    END AS sls_price
FROM bronze_schema.crm_sales_details;

-- Truncating Table
TRUNCATE TABLE silver_schema.erp_cust_az12;

INSERT INTO silver_schema.erp_cust_az12(cid, bdate,gen)

SELECT 
CASE 
    WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid,4,CHAR_LENGTH(cid))
    ELSE cid
END AS cid,
CASE 
    WHEN 
    bdate > CURRENT_TIMESTAMP THEN NULL
    ELSE bdate
END AS bdate,
CASE 
    WHEN UPPER(TRIM(gen)) IN ('M','Male') THEN 'Male'
    WHEN UPPER(TRIM(gen)) IN ('F','Female') THEN 'Female'
    ELSE 'N/A'
END AS gen
FROM bronze_schema.erp_cust_az12;

-- Truncating Table
TRUNCATE TABLE silver_schema.erp_loc_a101;

 INSERT INTO silver_schema.erp_loc_a101(cid,cntry)
 SELECT 
    REPLACE(cid,'-',''),
    CASE 
    WHEN TRIM(cntry) IN ('US','USA','United States') THEN 'United States'
    WHEN TRIM(cntry) = 'DE' THEN 'Germany'
    WHEN TRIM(cntry) IS NULL OR TRIM(cntry) ='' THEN 'N/A'
    ELSE TRIM(cntry) 
    END AS cntry
 FROM  bronze_schema.erp_loc_a101;


-- Truncating Table
TRUNCATE TABLE silver_schema.erp_px_cat_glv2;

INSERT INTO silver_schema.erp_px_cat_glv2(id,cat,subcat,maintenance)
SELECT 
    id,
    cat,
    subcat,
    maintenance 
FROM  bronze_schema.erp_px_cat_glv2;
END;

CALL silver_load_silver();



