/* Check the Primary Key doesn't contain NULL or Duplicates */

SELECT cst_id, COUNT(*)
FROM bronze_schema.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

SELECT *
FROM bronze_schema.crm_cust_info
WHERE cst_id = 29466;

SELECT *,
ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM bronze_schema.crm_cust_info
WHERE cst_id = 29466;


SELECT *
FROM(
SELECT *,
ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM bronze_schema.crm_cust_info) t
WHERE flag_last = 1;


/*Check for unwanted space*/

SELECT cst_firstname 
FROM bronze_schema.crm_cust_info
WHERE cst_firstname != TRIM(cst_firstname);

SELECT cst_lastname 
FROM bronze_schema.crm_cust_info
WHERE cst_lastname != TRIM(cst_lastname);


SELECT  
    cst_id,
    cst_key,
    TRIM(cst_firstname) AS cst_firstname,
    TRIM(cst_lastname) AS cst_lastname,
    cst_marital_status,
    cst_gndr,
    cst_create_date,
    dwh_create_date
FROM bronze_schema.crm_cust_info;

/* Data Standardization & Consistency */

SELECT DISTINCT cst_gndr
FROM  bronze_schema.crm_cust_info;

SELECT  
    cst_id,
    cst_key,
    TRIM(cst_firstname) AS cst_firstname,
    TRIM(cst_lastname) AS cst_lastname,
    cst_marital_status,
    
    CASE WHEN UPPER(TRIM(cst_gndr)) ='F' THEN 'Female'
    WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
    ELSE 'N/A'
    END
    cst_create_date,
    dwh_create_date
FROM bronze_schema.crm_cust_info;


SELECT DISTINCT cst_marital_status
FROM  bronze_schema.crm_cust_info;



SELECT  
    cst_id,
    cst_key,
    TRIM(cst_firstname) AS cst_firstname,
    TRIM(cst_lastname) AS cst_lastname,
    CASE WHEN UPPER(TRIM(cst_marital_status)) ='M' THEN 'Married'
        WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
        ELSE 'N/A'
    END cst_marital_status,
    CASE WHEN UPPER(TRIM(cst_gndr)) ='F' THEN 'Female'
        WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
        ELSE 'N/A'
    END cst_gndr,
    cst_create_date
FROM(
    SELECT *,
    ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
    FROM bronze_schema.crm_cust_info
    WHERE cst_id IS NOT NULL
)t
 WHERE flag_last = 1;

/*Insert the table*/

INSERT INTO silver_schema.crm_cust_info( 
    cst_id,
    cst_key,
    cst_firstname,
    cst_lastname,
    cst_marital_status,
    cst_gndr,
    cst_create_date
    )
SELECT  
    cst_id,
    cst_key,
    TRIM(cst_firstname) AS cst_firstname,
    TRIM(cst_lastname) AS cst_lastname,
    CASE WHEN UPPER(TRIM(cst_marital_status)) ='M' THEN 'Married'
        WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
        ELSE 'N/A'
    END cst_marital_status,
    CASE WHEN UPPER(TRIM(cst_gndr)) ='F' THEN 'Female'
        WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
        ELSE 'N/A'
    END cst_gndr,
    cst_create_date
FROM(
    SELECT *,
    ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
    FROM bronze_schema.crm_cust_info
    WHERE cst_id IS NOT NULL
)t
 WHERE flag_last = 1;


/* Check the Primary Key doesn't contain NULL or Duplicates */

SELECT cst_id, COUNT(*)
FROM silver_schema.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

/*Check for unwanted space*/

SELECT cst_firstname 
FROM silver_schema.crm_cust_info
WHERE cst_firstname != TRIM(cst_firstname);

SELECT cst_lastname 
FROM silver_schema.crm_cust_info
WHERE cst_lastname != TRIM(cst_lastname);

/* Data Standardization & Consistency */

SELECT DISTINCT cst_gndr
FROM  silver_schema.crm_cust_info;

select * from silver_schema.crm_cust_info;
